{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/quotes/HighlightedQuote.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/NewCommentForm.js","components/comments/Comments.js","components/pages/QuoteDetail.js"],"names":["module","exports","HighlightedQuote","props","quote","text","author","className","classes","CommentItem","item","CommentsList","comments","map","comment","id","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","quoteId","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","useEffect","form","onSubmit","LoadingSpinner","control","htmlFor","rows","ref","actions","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/3.ead80a73.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__1FCDR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__2YC4Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__1svLt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__WjeKm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__Ps_s_\",\"loading\":\"NewCommentForm_loading__2TKrv\",\"control\":\"NewCommentForm_control__3hFwm\",\"actions\":\"NewCommentForm_actions__2UUnG\"};","import classes from \"./HighlightedQuote.module.css\";\n\nfunction HighlightedQuote(props) {\n  const { text, author } = props.quote;\n\n  return (\n    <figure className={classes.quote}>\n      <p>{text}</p>\n      <figcaption>{author}</figcaption>\n    </figure>\n  );\n}\n\nexport default HighlightedQuote;\n","import classes from \"./CommentItem.module.css\";\n\nfunction CommentItem(props) {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n}\n\nexport default CommentItem;\n","import CommentItem from \"./CommentItem\";\nimport classes from \"./CommentsList.module.css\";\n\nfunction CommentsList(props) {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n}\n\nexport default CommentsList;\n","import { useRef, useEffect } from \"react\";\nimport LoadingSpinner from \"../ui/LoadingSpinner\";\nimport classes from \"./NewCommentForm.module.css\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\n\nfunction NewCommentForm(props) {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment, quoteId } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n    sendRequest({ commentData: { text: enteredText }, quoteId });\n  }\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n}\n\nexport default NewCommentForm;\n","import { useCallback, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useEffect } from \"react/cjs/react.development\";\nimport useHttp from \"../../hooks/use-http\";\nimport CommentsList from \"./CommentsList\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../ui/LoadingSpinner\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\n\nfunction Comments() {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const { quoteId } = useParams();\n\n  // const { quoteId } = params;\n\n  function startAddCommentHandler() {\n    setIsAddingComment(true);\n  }\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No Comments Added Yet</p>;\n  }\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n}\n\nexport default Comments;\n","import { Route, useParams, Link, useRouteMatch } from \"react-router-dom\";\r\nimport HighlightedQuote from \"../quotes/HighlightedQuote\";\r\nimport Comments from \"../comments/Comments\";\r\nimport useHttp from \"../../hooks/use-http\";\r\nimport LoadingSpinner from \"../ui/LoadingSpinner\";\r\nimport { getSingleQuote } from \"../../lib/api\";\r\nimport { useEffect } from \"react/cjs/react.development\";\r\n\r\nfunction QuoteDetail() {\r\n  const match = useRouteMatch();\r\n  const params = useParams();\r\n\r\n  const { quoteId } = params;\r\n\r\n  // prettier-ignore\r\n  const {sendRequest, status, data: loadedQuote, error}= useHttp(getSingleQuote, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === \"pending\")\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n\r\n  if (error) return <p className=\"centered focused\">{error}</p>;\r\n\r\n  if (!loadedQuote.text)\r\n    return <p className=\"centered focused\"> No Quote Found</p>;\r\n\r\n  return (\r\n    <>\r\n      <HighlightedQuote quote={loadedQuote} />\r\n      <Route path={`${match.path}`} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            View comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}